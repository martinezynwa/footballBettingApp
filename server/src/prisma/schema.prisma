datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

//User & Auth models
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified Boolean?
  image         String
  username      String    @unique
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime? @default(now())
  updatedAt     DateTime?
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//League & Team models
model League {
  id      Int    @id @map("_id")
  name    String
  country String
  type    String

  @@map("leagues")
}

model Team {
  id         Int     @id @map("_id")
  leagueId   Int
  leagueName String
  name       String
  code       String
  country    String
  logo       String
  national   Boolean

  @@map("teams")
}

//Match model + types
model Match {
  id       Int        @id @map("_id")
  status   String
  date     String
  round    String
  season   Int
  homeTeam SingleTeam
  awayTeam SingleTeam
  odds     MatchOdds?
  score    Score?

  @@map("matches")
}

type SingleTeam {
  id   Int
  name String
  logo String
}

type MatchOdds {
  fixtureId  Int
  lastUpdate String
  bookmaker  String
  winner     WinningTeam
}

type WinningTeam {
  home String
  draw String
  away String
}

type Score {
  homeTeam Goals
  awayTeam Goals
}

//H2H model + types
model H2H {
  id      String     @id @map("_id")
  matches H2HMatch[]
}

type H2HMatch {
  matchId  Int
  leagueId Int
  date     String
  season   Int
  homeTeam H2HTeamDetail
  awayTeam H2HTeamDetail
}

type H2HTeamDetail {
  teamId Int
  goals  Goals
}

//used within both H2H and Match
type Goals {
  winner    Boolean?
  fulltime  Int
  halftime  Int
  extratime ExtratimeGoals?
}

type ExtratimeGoals {
  extratime Int?
  penalty   Int?
}
